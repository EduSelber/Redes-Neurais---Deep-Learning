{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"data/","title":"Atividade: 1. Data \u2014 ANN &amp; DL (2025.2)","text":"<p>Esta p\u00e1gina documenta meu notebook <code>codes.ipynb</code> para a atividade 1. Data da disciplina Artificial Neural Networks and Deep Learning (ANN &amp; DL). A atividade \u00e9 composta por tr\u00eas exerc\u00edcios e segue exatamente as instru\u00e7\u00f5es oficiais do curso. Consulte o enunciado para detalhes dos requisitos e crit\u00e9rios de avalia\u00e7\u00e3o.</p>"},{"location":"data/#exercicio-1-exploring-class-separability-in-2d","title":"Exerc\u00edcio 1 \u2014 Exploring Class Separability in 2D","text":""},{"location":"data/#generate-the-data","title":"Generate  the data:","text":"<pre><code>data = {'x': [], 'y':[], 'class':[], 'color': []}\n\n\nmean_std_dev = [([2,3], np.diag([0.8, 2.5])) ,\n([5,6], np.diag([1.2, 1.9])),\n([8,1], np.diag([0.9, 0.9])),\n([15,4], np.diag([0.5, 2.0]))]\nmean = [2, 3]\ncov = np.diag([0.8, 2.5])\nfor i in range(0, 4):\n\n    mean = mean_std_dev[i][0]\n    cov = mean_std_dev[i][1]\n\n    x, y = np.random.multivariate_normal(mean, cov, 100).T\n    classe = []\n    for c in range(0, len(x)):\n        data['x'].append(x[c])\n        data['y'].append(y[c])\n        data['class'].append(f\"class_{i}\")\n        if i == 0:\n            data['color'].append((1.0, 0.0, 0.0))\n        if i == 1:\n            data['color'].append((1.0,0.0,1.0,))\n        if i == 2:\n            data['color'].append((1.0, 1.0, 0.0))\n        if i == 3:\n            data['color'].append((1.0, 0.5, 0.5))\n</code></pre>"},{"location":"data/#ploting-the-data","title":"Ploting the Data","text":""},{"location":"data/#analyze-and-draw-boundaries","title":"Analyze and Draw Boundaries","text":"<p>a. Percebe-se que as duas classes mais a direita est\u00e3o bme disntintas. Enquanto, que as duas a mais esquerda, vermelho e roxo, apresentam um overlap entre elas.</p> <p>b.Observando o plot precisa de tres  linear boundays, para poder distinguir, uma vez que com uma apenas daria para separar entre duas metade  esquerdo e direito, e teria duas classes em cada.Al\u00e9m de que com duas um lado ficaria com duas clssses, sendo necess\u00e1rio ent\u00e3o uma terceira linha para separar estas duas.</p> <p>c. </p>"},{"location":"data/#exercicio-2-non-linearity-in-higher-dimensions","title":"Exerc\u00edcio 2 \u2014 Non-Linearity in Higher Dimensions","text":""},{"location":"data/#generate-the-data_1","title":"Generate  the data:","text":"<pre><code>import numpy as np\nimport pandas as pd\n\nrng = np.random.default_rng(42)\ndata = {\n    'x1': [], 'x2': [], 'x3': [], 'x4': [], 'x5': [],\n    'class': [], 'color': []\n}\nparams = [\n    (\n        np.array([0.0, 0.0, 0.0, 0.0, 0.0]),\n        np.array([\n            [1.0, 0.8, 0.1, 0.0, 0.0],\n            [0.8, 1.0, 0.3, 0.0, 0.0],\n            [0.1, 0.3, 1.0, 0.5, 0.0],\n            [0.0, 0.0, 0.5, 1.0, 0.2],\n            [0.0, 0.0, 0.0, 0.2, 1.0],\n        ]),\n        \"class_A\",\n        (1.0, 0.0, 0.0), \n    ),\n    (\n        np.array([1.5, 1.5, 1.5, 1.5, 1.5]),\n        np.array([\n            [1.5, -0.7, 0.2, 0.0, 0.0],\n            [-0.7, 1.5, 0.4, 0.0, 0.0],\n            [0.2, 0.4, 1.5, 0.6, 0.0],\n            [0.0, 0.0, 0.6, 1.5, 0.3],\n            [0.0, 0.0, 0.0, 0.3, 1.5],\n        ]),\n        \"class_B\",\n        (0.0, 0.0, 1.0), \n    ),\n]\n\nn_per_class = 500\n\nfor mean, cov, label, color in params:\n    samples = rng.multivariate_normal(mean, cov, size=n_per_class)\n    for s in samples:\n        data['x1'].append(s[0])\n        data['x2'].append(s[1])\n        data['x3'].append(s[2])\n        data['x4'].append(s[3])\n        data['x5'].append(s[4])\n        data['class'].append(label)\n        data['color'].append(color)\n\n\ndf = pd.DataFrame(data)\n</code></pre>"},{"location":"data/#visualize-the-data","title":"Visualize the data","text":""},{"location":"data/#analyzethe-plot","title":"Analyzethe plot","text":"<p>a. Observando percebe-se que os vermelhos tem a tendencia a ficar no lado esquerdo, enquanto os azuis tendem a ficar no lado direito. No entanto, isto n\u00e3o \u00e9 verdade para todos,uma vez que \u00e9 poss\u00edvel encontrar alguns pontos invadindo os territ\u00f3rios, ou seja, se desenhasse uma linha no meio n\u00e3o teria uma acuracia muito boa, por conta desta mistura entre as classes.</p> <p>b.Este tipo de data impoe um desafio,uma vez que o modelo teria dificuldade para pegar esses corner cases, uma vez que precisaria de um grande numero de linhas para contornar, o que tamb\u00e9m pode pender para um overfitting.</p> <p>c. </p>"},{"location":"data/#exercicio-3-preparing-real-world-data-for-a-neural-network","title":"Exerc\u00edcio 3 \u2014 Preparing Real-World Data for a Neural Network","text":""},{"location":"data/#describe-the-data","title":"Describe the Data","text":"<ul> <li> <p>O objetivo do dataset \"Spaceship Titanic\" \u00e9 prever se os passageiros foram transportados para outra dimens\u00e3o, sendo que a coluna \"Transported\" representa isto, ou seja se nela estiver o valor 1 significa que o passageiro foi tranportado, caso seja 0 n\u00e3o.</p> </li> <li> <p>Features numericos: Age, RoomService, FoodCourt, ShoppingMall, Spa, VRDeck</p> </li> <li>Features categ\u00f3ricos: PassengerId, HomePlanet, CryoSleep, Cabin, Destination, VIP, Name</li> </ul> <p>-Colunas com \"missing values\" e as quantidades Colunas com faltantes: CryoSleep       217 ShoppingMall    208 VIP             203 HomePlanet      201 Name            200 Cabin           199 VRDeck          188 FoodCourt       183 Spa             183 Destination     182 RoomService     181 Age             179</p>"},{"location":"data/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Descri\u00e7\u00e3o do Spaceship Titanic e do alvo <code>Transported</code>: https://www.kaggle.com/competitions/spaceship-titanic/data.  </li> </ul>"}]}